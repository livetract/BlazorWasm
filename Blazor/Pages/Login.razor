@page "/Login"
@inject IHttpClientFactory HttpClientFactory

<h3>Login</h3>

<EditForm Model="_loginModel" OnValidSubmit="ValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <p>
        <label>
            <InputText @bind-Value="_loginModel.UserName" />
        </label>
    </p>
    <p>
        <label>
            <InputText @bind-Value="_loginModel.Password" />
        </label>
    </p>
    <button type="submit">Submit</button>
</EditForm>
<hr />


<AuthorizeView>
    <Authorized>
        <h1>Hello, @context.User.Identity.Name!</h1>
        <p>You can only see this content if you're authenticated.</p>
    </Authorized>
    <NotAuthorized>
        <h1>Authentication Failure!</h1>
        <p>You're not signed in.</p>
    </NotAuthorized>
</AuthorizeView>



@if (string.IsNullOrEmpty(msg))
{
    <p>数据还没有加载出来哦</p>
}
else
{
    <p>token:   @msg</p>
}
@code {

    private LoginModel _loginModel;
    private string msg;
    protected override void OnInitialized()
    {
        _loginModel = new LoginModel();

        base.OnInitialized();
    }

    private async Task ValidSubmit()
    {
        var client = HttpClientFactory.CreateClient("auth");

        var res = await client.PostAsJsonAsync("auth/signin", _loginModel);

        var header = res.Headers.TryGetValues("Authorization", out var tokens);

        var token = tokens.FirstOrDefault();
        msg = token;
    }

}